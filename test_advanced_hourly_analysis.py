"""
Test script for Advanced Hourly Analysis
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÅ‡∏ö‡∏ö Advanced
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from advanced_hourly_analysis import AdvancedHourlyAnalyzer, analyze_hourly_data_advanced, predict_hourly_performance
import json
from datetime import datetime, timedelta

def create_sample_hourly_data():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    sample_data = []
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    for i in range(24):
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á
        base_tons = 50 + (i * 2)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        if 6 <= i <= 18:  # ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            base_tons += 30
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏õ‡∏£‡∏õ‡∏£‡∏ß‡∏ô
        import random
        variation = random.uniform(-10, 10)
        total_tons = max(0, base_tons + variation)
        
        # ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô Line A ‡πÅ‡∏•‡∏∞ B
        a_ratio = 0.6 + random.uniform(-0.2, 0.2)
        a_tons = total_tons * a_ratio
        b_tons = total_tons * (1 - a_ratio)
        
        # ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô Fresh ‡πÅ‡∏•‡∏∞ Burnt
        fresh_ratio = 0.7 + random.uniform(-0.1, 0.1)
        fresh_tons = total_tons * fresh_ratio
        burnt_tons = total_tons * (1 - fresh_ratio)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ñ
        avg_tons_per_truck = 15
        total_count = max(1, int(total_tons / avg_tons_per_truck))
        a_count = int(total_count * a_ratio)
        b_count = total_count - a_count
        
        sample_data.append({
            'Time': f"{i:02d}:00-{i+1:02d}:00",
            'A_Count': a_count,
            'A_Tons': round(a_tons, 2),
            'B_Count': b_count,
            'B_Tons': round(b_tons, 2),
            'Total_Count': total_count,
            'Total_Tons': round(total_tons, 2),
            'Fresh_Tons': round(fresh_tons, 2),
            'Burnt_Tons': round(burnt_tons, 2),
            'hour': i,
            'time_label': f"{i:02d}:00-{i+1:02d}:00"
        })
    
    return sample_data

def test_advanced_analyzer():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö AdvancedHourlyAnalyzer"""
    print("=" * 60)
    print("‡∏ó‡∏î‡∏™‡∏≠‡∏ö AdvancedHourlyAnalyzer")
    print("=" * 60)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    sample_data = create_sample_hourly_data()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á analyzer
    analyzer = AdvancedHourlyAnalyzer()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
    print("\n1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û...")
    performance_result = analyzer.analyze_hourly_performance(sample_data)
    
    print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {len(sample_data)} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á")
    print(f"   - ‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°: {performance_result['overall_performance_index']['overall_index']:.1f}")
    print(f"   - ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û: {performance_result['overall_performance_index']['performance_level']}")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å
    print("\n2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å...")
    insights = analyzer.generate_hourly_insights(performance_result)
    print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å: {len(insights)}")
    for i, insight in enumerate(insights[:3], 1):  # ‡πÅ‡∏™‡∏î‡∏á 3 ‡∏Ç‡πâ‡∏≠‡πÅ‡∏£‡∏Å
        print(f"   {i}. {insight}")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    print("\n3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥...")
    recommendations = analyzer.generate_hourly_recommendations(performance_result)
    print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {len(recommendations)}")
    for i, rec in enumerate(recommendations, 1):
        print(f"   {i}. {rec['title']} ({rec['priority']})")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
    print("\n4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå...")
    prediction = analyzer.predict_next_hour_performance(sample_data, 15)
    if 'error' not in prediction:
        print(f"   - ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: {prediction['predicted_tons']:.1f} ‡∏ï‡∏±‡∏ô")
        print(f"   - ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô: {prediction['confidence_level']}")
    else:
        print(f"   - ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {prediction['error']}")
    
    return performance_result

def test_main_functions():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("\n" + "=" * 60)
    print("‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å")
    print("=" * 60)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    sample_data = create_sample_hourly_data()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö analyze_hourly_data_advanced
    print("\n1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö analyze_hourly_data_advanced...")
    result = analyze_hourly_data_advanced(sample_data)
    
    print(f"   - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {'‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' if 'error' not in result else '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'}")
    if 'error' not in result:
        print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å: {len(result['insights'])}")
        print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {len(result['recommendations'])}")
        print(f"   - ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á: {result['generated_at']}")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö predict_hourly_performance
    print("\n2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö predict_hourly_performance...")
    prediction = predict_hourly_performance(sample_data, 20)
    
    if 'error' not in prediction:
        print(f"   - ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà 21: {prediction['predicted_tons']:.1f} ‡∏ï‡∏±‡∏ô")
        print(f"   - ‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô: {prediction['confidence_interval']['lower']:.1f} - {prediction['confidence_interval']['upper']:.1f}")
    else:
        print(f"   - ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {prediction['error']}")
    
    return result

def test_performance_metrics():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
    print("\n" + "=" * 60)
    print("‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û")
    print("=" * 60)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    sample_data = create_sample_hourly_data()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á analyzer
    analyzer = AdvancedHourlyAnalyzer()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏ï‡πà‡∏≤‡∏á‡πÜ
    import pandas as pd
    df = pd.DataFrame(sample_data)
    
    print("\n1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û...")
    perf_metrics = analyzer._calculate_performance_metrics(df)
    print(f"   - ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏ß‡∏°: {perf_metrics['total_tons']:.1f} ‡∏ï‡∏±‡∏ô")
    print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ñ‡∏£‡∏ß‡∏°: {perf_metrics['total_trucks']} ‡∏Ñ‡∏±‡∏ô")
    print(f"   - ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {perf_metrics['active_hours']}/24")
    print(f"   - ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û: {perf_metrics['efficiency_ratio']:.1%}")
    
    print("\n2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°...")
    trend_analysis = analyzer._analyze_hourly_trends(df)
    if 'error' not in trend_analysis:
        print(f"   - ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°: {trend_analysis['trend_direction']}")
        print(f"   - ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á: {trend_analysis['trend_strength']}")
        print(f"   - ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: {trend_analysis['change_percentage']:.1f}%")
    
    print("\n3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏õ‡∏£‡∏õ‡∏£‡∏ß‡∏ô...")
    variability = analyzer._analyze_variability(df)
    if 'error' not in variability:
        print(f"   - ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£: {variability['stability_level']}")
        print(f"   - ‡∏Ñ‡πà‡∏≤‡∏™‡∏±‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏£‡∏ú‡∏±‡∏ô: {variability['coefficient_of_variation']:.1f}%")
        print(f"   - ‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥: {variability['outliers_count']} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á")
    
    print("\n4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå...")
    correlation = analyzer._analyze_hourly_correlations(df)
    if 'error' not in correlation:
        print(f"   - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå A-B: {correlation['ab_correlation']:.3f}")
        print(f"   - ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•: {correlation['balance_assessment']}")
        print(f"   - ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô A:B: {correlation['balance_ratio']:.2f}:1")

def display_sample_results():
    """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"""
    print("\n" + "=" * 60)
    print("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
    print("=" * 60)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    sample_data = create_sample_hourly_data()
    
    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    result = analyze_hourly_data_advanced(sample_data)
    
    if 'error' not in result:
        analysis = result['analysis']
        
        print("\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:")
        print(f"   ‚Ä¢ ‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°: {analysis['overall_performance_index']['overall_index']:.1f}/100")
        print(f"   ‚Ä¢ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û: {analysis['overall_performance_index']['performance_level']}")
        print(f"   ‚Ä¢ ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏ß‡∏°: {analysis['performance_metrics']['total_tons']:.1f} ‡∏ï‡∏±‡∏ô")
        print(f"   ‚Ä¢ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û: {analysis['performance_metrics']['efficiency_ratio']:.1%}")
        
        print("\nüí° ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å:")
        for i, insight in enumerate(result['insights'], 1):
            print(f"   {i}. {insight}")
        
        print("\nüéØ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
        for i, rec in enumerate(result['recommendations'], 1):
            print(f"   {i}. {rec['title']} ({rec['priority']})")
            print(f"      {rec['description']}")
    
    else:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {result['error']}")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö Advanced Hourly Analysis Module")
    print("=" * 60)
    
    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö AdvancedHourlyAnalyzer
        test_advanced_analyzer()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
        test_main_functions()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
        test_performance_metrics()
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        display_sample_results()
        
        print("\n" + "=" * 60)
        print("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô - ‡∏ó‡∏∏‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥")
        print("=" * 60)
        
    except Exception as e:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
